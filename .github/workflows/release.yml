name: Build and Release RPM

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-builder

jobs:
  build-rpm:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      with:
        fetch-depth: 0
    
    - name: Set up variables
      id: vars
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
        # Generate release name
        echo "release_name=krunner-bazaar $VERSION" >> $GITHUB_OUTPUT
        
        # Set container image tag
        echo "image_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT
    
    - name: Log in to Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build development container
      run: |
        docker build -t ${{ steps.vars.outputs.image_tag }} -f Containerfile .
        docker push ${{ steps.vars.outputs.image_tag }}
    
    - name: Create RPM build structure
      run: |
        mkdir -p rpmbuild/{SOURCES,SPECS,BUILD,RPMS,SRPMS}
    
    - name: Create source tarball
      run: |
        git archive --format=tar.gz --prefix=krunner-bazaar-${{ steps.vars.outputs.version }}/ HEAD > rpmbuild/SOURCES/krunner-bazaar-${{ steps.vars.outputs.version }}.tar.gz
    
    - name: Copy spec file
      run: |
        cp krunner-bazaar.spec rpmbuild/SPECS/
    
    - name: Build RPM
      run: |
        docker run --rm \
          --volume "$(pwd):/workspace" \
          --workdir /workspace \
          ${{ steps.vars.outputs.image_tag }} \
          bash -c "
            set -euo pipefail
            
            # Build the RPM
            rpmbuild --define '_topdir /workspace/rpmbuild' \
                     --define 'version ${{ steps.vars.outputs.version }}' \
                     -ba rpmbuild/SPECS/krunner-bazaar.spec
          "
    
    - name: List built packages
      run: |
        echo "Built RPM packages:"
        find rpmbuild/RPMS -name "*.rpm" -type f
        find rpmbuild/SRPMS -name "*.rpm" -type f
    
    - name: Prepare release artifacts
      run: |
        mkdir -p release-artifacts
        
        # Copy RPM packages
        find rpmbuild/RPMS -name "*.rpm" -type f -exec cp {} release-artifacts/ \;
        find rpmbuild/SRPMS -name "*.rpm" -type f -exec cp {} release-artifacts/ \;
        
        # Create checksums
        cd release-artifacts
        sha256sum *.rpm > SHA256SUMS
        cd ..
        
        # List artifacts
        echo "Release artifacts:"
        ls -la release-artifacts/
    
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF        
        KDE KRunner plugin for searching Flatpak applications via Bazaar.
        
        ## Installation (Fedora 42)
                        
        \`\`\`bash
        # For the main plugin
        sudo dnf install krunner-bazaar-${{ steps.vars.outputs.version }}-1.fc42.x86_64.rpm
        
        # For CLI tools (optional)
        sudo dnf install krunner-bazaar-tools-${{ steps.vars.outputs.version }}-1.fc42.x86_64.rpm
        \`\`\`
      
        ## Verification
        
        Verify the integrity of downloaded files:
        
        \`\`\`bash
        sha256sum -c SHA256SUMS
        \`\`\`
        EOF
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2
      with:
        tag_name: ${{ steps.vars.outputs.tag }}
        name: ${{ steps.vars.outputs.release_name }}
        body_path: release_notes.md
        files: |
          release-artifacts/*.rpm
          release-artifacts/SHA256SUMS
        draft: false
        prerelease: false
    
    - name: Update latest tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -f latest
        git push origin latest --force
